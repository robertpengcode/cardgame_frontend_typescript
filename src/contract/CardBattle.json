{
  "address": "0xC579757142a006b64A0d6a7CdAbD327a73Bb18D6",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int8",
              "name": "attack",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "defense",
              "type": "int8"
            }
          ],
          "internalType": "struct CardBattle.Token[]",
          "name": "tokensArr",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "gameTokensAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CardBattle__CannotChoiceNo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__InBattleAlready",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__IsPlayerAlready",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__MadeMoveAlready",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__NotInBattle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__NotInThisBattle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__NotPlayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__OwnNoCharacter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__OwnNoSuchTreasure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__RequireCharacterToPlay",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__SentOwnerFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__SentWrongValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CardBattle__StatusNotCorrect",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "EndedBattle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum CardBattle.Choice",
          "name": "choice",
          "type": "uint8"
        }
      ],
      "name": "MadeMove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "MintedCharacter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "MintedTreasure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "PickedCharacter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "RegisteredPlayer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "playerIdx",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "StartedBattle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "UsedBerserk",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "UsedForceShield",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "WithdrewByOwner",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "characterPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        }
      ],
      "name": "deleteBattle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddr",
          "type": "address"
        }
      ],
      "name": "deletePlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameTokensContract",
      "outputs": [
        {
          "internalType": "contract GameTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        }
      ],
      "name": "getBattle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[2]",
              "name": "playerAddrs",
              "type": "address[2]"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "enum CardBattle.BattleStatus",
              "name": "battleStatus",
              "type": "uint8"
            },
            {
              "internalType": "enum CardBattle.Choice[2]",
              "name": "moves",
              "type": "uint8[2]"
            }
          ],
          "internalType": "struct CardBattle.Battle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        }
      ],
      "name": "getBattleStatus",
      "outputs": [
        {
          "internalType": "enum CardBattle.BattleStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastMintedChar",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextBattleId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getOwnedTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddr",
          "type": "address"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "playerAddr",
              "type": "address"
            },
            {
              "internalType": "int8",
              "name": "health",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "energy",
              "type": "int8"
            },
            {
              "internalType": "uint256[3]",
              "name": "battleTokens",
              "type": "uint256[3]"
            },
            {
              "internalType": "int8",
              "name": "battleAttack",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "battleDefense",
              "type": "int8"
            },
            {
              "internalType": "uint8",
              "name": "battleMoveId",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isInBattle",
              "type": "bool"
            }
          ],
          "internalType": "struct CardBattle.Player",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddr",
          "type": "address"
        }
      ],
      "name": "getPlayerBattleTokens",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int8",
              "name": "attack",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "defense",
              "type": "int8"
            }
          ],
          "internalType": "struct CardBattle.Token",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWaitingBattleId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddr",
          "type": "address"
        }
      ],
      "name": "isPlayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "battleId",
          "type": "uint256"
        },
        {
          "internalType": "enum CardBattle.Choice",
          "name": "choice",
          "type": "uint8"
        }
      ],
      "name": "makeMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintCharacter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treasureId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTreasure",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characterId",
          "type": "uint256"
        }
      ],
      "name": "pickCharacter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasurePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useBerserk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useForceShield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa686071c75c20eb80fc47e01a0fb33532f853f48842d28ee056b9934b3de910",
  "receipt": {
    "to": null,
    "from": "0xC8e5a1d3ADfF41B662aaf834BA11B95660A6c86b",
    "contractAddress": "0xC579757142a006b64A0d6a7CdAbD327a73Bb18D6",
    "transactionIndex": 4,
    "gasUsed": "5376844",
    "logsBloom": "0x00000000000000000000000002000000000000000000000000800000000000000000000000000000000000000000000000008000000000000000000000008000000000000000000000000000000000800001000000000000000100000000000000000000020000000000000000000800000000000000080080000000000000400000000000000000000000000000000000000000000000000000000000000000200000000000000000080000000000000000000000000000000000000000004200000000000000000001000000001100000000000000000000100000000020000000000000000000000000000000000000000000000000000000000000100101",
    "blockHash": "0x5c51b87eb882881abe7460dbe77348aebd9fd1ea421d53446ba48c51db39b56d",
    "transactionHash": "0xaa686071c75c20eb80fc47e01a0fb33532f853f48842d28ee056b9934b3de910",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 34327151,
        "transactionHash": "0xaa686071c75c20eb80fc47e01a0fb33532f853f48842d28ee056b9934b3de910",
        "address": "0xC579757142a006b64A0d6a7CdAbD327a73Bb18D6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c8e5a1d3adff41b662aaf834ba11b95660a6c86b"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x5c51b87eb882881abe7460dbe77348aebd9fd1ea421d53446ba48c51db39b56d"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 34327151,
        "transactionHash": "0xaa686071c75c20eb80fc47e01a0fb33532f853f48842d28ee056b9934b3de910",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c8e5a1d3adff41b662aaf834ba11b95660a6c86b",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002e52c311d5930000000000000000000000000000000000000000000000000003a8784683222b2a00000000000000000000000000000000000000000000060dcd5e1080fcfc3787000000000000000000000000000000000000000000000000037a2583714c982a00000000000000000000000000000000000000000000060dcd8c63440ed1ca87",
        "logIndex": 10,
        "blockHash": "0x5c51b87eb882881abe7460dbe77348aebd9fd1ea421d53446ba48c51db39b56d"
      }
    ],
    "blockNumber": 34327151,
    "cumulativeGasUsed": "5913978",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      [
        0,
        0
      ],
      [
        8,
        2
      ],
      [
        7,
        3
      ],
      [
        7,
        3
      ],
      [
        6,
        4
      ],
      [
        6,
        4
      ],
      [
        5,
        5
      ],
      [
        5,
        5
      ],
      [
        1,
        0
      ],
      [
        0,
        1
      ]
    ],
    "0xA3eF9Dc1D86584Ee3161c9d980eb62E2374Fa459"
  ],
  "numDeployments": 1,
  "solcInputHash": "ca842825a798e776fefc34b3101706d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"attack\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"defense\",\"type\":\"int8\"}],\"internalType\":\"struct CardBattle.Token[]\",\"name\":\"tokensArr\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"gameTokensAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CardBattle__CannotChoiceNo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__InBattleAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__IsPlayerAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__MadeMoveAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__NotInBattle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__NotInThisBattle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__NotPlayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__OwnNoCharacter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__OwnNoSuchTreasure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__RequireCharacterToPlay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__SentOwnerFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__SentWrongValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CardBattle__StatusNotCorrect\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"EndedBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum CardBattle.Choice\",\"name\":\"choice\",\"type\":\"uint8\"}],\"name\":\"MadeMove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"MintedCharacter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"MintedTreasure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PickedCharacter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RegisteredPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"playerIdx\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StartedBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UpdatedGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UsedBerserk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UsedForceShield\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"WithdrewByOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"characterPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"}],\"name\":\"deleteBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"deletePlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameTokensContract\",\"outputs\":[{\"internalType\":\"contract GameTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"}],\"name\":\"getBattle\",\"outputs\":[{\"components\":[{\"internalType\":\"address[2]\",\"name\":\"playerAddrs\",\"type\":\"address[2]\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"enum CardBattle.BattleStatus\",\"name\":\"battleStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum CardBattle.Choice[2]\",\"name\":\"moves\",\"type\":\"uint8[2]\"}],\"internalType\":\"struct CardBattle.Battle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"}],\"name\":\"getBattleStatus\",\"outputs\":[{\"internalType\":\"enum CardBattle.BattleStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastMintedChar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextBattleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnedTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"getPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"int8\",\"name\":\"health\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"energy\",\"type\":\"int8\"},{\"internalType\":\"uint256[3]\",\"name\":\"battleTokens\",\"type\":\"uint256[3]\"},{\"internalType\":\"int8\",\"name\":\"battleAttack\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"battleDefense\",\"type\":\"int8\"},{\"internalType\":\"uint8\",\"name\":\"battleMoveId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isInBattle\",\"type\":\"bool\"}],\"internalType\":\"struct CardBattle.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"getPlayerBattleTokens\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"attack\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"defense\",\"type\":\"int8\"}],\"internalType\":\"struct CardBattle.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWaitingBattleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"isPlayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"internalType\":\"enum CardBattle.Choice\",\"name\":\"choice\",\"type\":\"uint8\"}],\"name\":\"makeMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCharacter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasureId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTreasure\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"}],\"name\":\"pickCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasurePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useBerserk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useForceShield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CardBattle.sol\":\"CardBattle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CardBattle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./GameTokens.sol\\\";\\n\\ncontract CardBattle is ERC1155Holder, Ownable, ReentrancyGuard {\\n    GameTokens public immutable gameTokensContract;\\n    \\n    uint256 public constant characterPrice = 0.001 ether;\\n    uint256 public constant treasurePrice = 0.0002 ether;\\n    //ToDo1: players pay ETH or buy game tokens (e.g., Gold) to play in the future\\n    //ToDo2: set up reward/prize mechanism (e.g., pay Gold) in the future\\n    //uint256 public constant battlePrice = 0.001 ether;\\n    //uint256 public constant winnerPrize = 0.0018 ether;\\n    //battleId starts from 1\\n    uint256 private nextBattleId = 1;\\n    //easier to check player's new minted character\\n    uint256 private lastMintedChar;\\n    //battles waiting for player to join\\n    uint256 private waitingBattleId = 0;\\n\\n    struct Token {\\n        int8 attack;\\n        int8 defense;\\n    }\\n\\n    struct Player {\\n        address playerAddr;\\n        //uint256 battleTimes;\\n        int8 health;\\n        int8 energy;\\n        //[characterId, treasureId1, treasureId2]\\n        uint256[3] battleTokens;\\n        int8 battleAttack;\\n        int8 battleDefense;\\n        uint8 battleMoveId;\\n        bool isInBattle;\\n    }\\n\\n    struct Battle {\\n        address[2] playerAddrs;\\n        address winner;\\n        BattleStatus battleStatus;\\n        Choice[2] moves;\\n    }\\n\\n    enum BattleStatus {\\n        PENDING,\\n        STARTED,\\n        ENDED\\n    }\\n\\n    enum Choice {\\n        NO,\\n        ATTACK,\\n        DEFENSE\\n    }\\n\\n    //user address to a Player struct\\n    mapping(address => Player) private players;\\n    //user address to tokenId to owned amount\\n    mapping(address => mapping(uint256 => uint256)) private ownedTokens;\\n    //battleId to a Battle struct\\n    mapping(uint256 => Battle) private battles;\\n    //tokenId to token struct\\n    mapping(uint256 => Token) private tokens;\\n    //user address to is in game or not\\n    //mapping(address => bool) private isInGame;\\n    //user address to ether balance\\n    //mapping(address => uint256) private playerBalances;\\n\\n    event RegisteredPlayer(address indexed player, uint256 time);\\n    event MintedCharacter(address indexed player, uint256 tokenId, uint256 time);\\n    event MintedTreasure(address indexed player, uint256 tokenId, uint256 time);\\n    event PickedCharacter(address indexed player, uint256 tokenId, uint256 time);\\n    event UsedBerserk(address indexed player, uint256 tokenId, uint256 time);\\n    event UsedForceShield(address indexed player, uint256 tokenId, uint256 time);\\n    event StartedBattle(address indexed player1, address indexed player2, uint256 indexed battleId, uint8 playerIdx, uint256 time);\\n    event MadeMove(uint256 indexed battleId, address indexed player, Choice choice);\\n    event UpdatedGame(uint256 indexed battleId, address player1, address player2, uint256 time);\\n    event EndedBattle(uint256 indexed battleId, address indexed winner, uint256 time);\\n    event WithdrewByOwner(address owner, uint256 balance, uint256 time);\\n\\n    error CardBattle__IsPlayerAlready();\\n    error CardBattle__NotPlayer();\\n    error CardBattle__SentWrongValue();\\n    //error CardBattle__NeedToBuyBattles();\\n    error CardBattle__OwnNoCharacter();\\n    error CardBattle__OwnNoSuchTreasure();\\n    error CardBattle__RequireCharacterToPlay();\\n    error CardBattle__InBattleAlready();\\n    error CardBattle__NotInBattle();\\n    error CardBattle__NotInThisBattle();\\n    error CardBattle__StatusNotCorrect();\\n    error CardBattle__CannotChoiceNo();\\n    error CardBattle__MadeMoveAlready();\\n    error CardBattle__SentOwnerFailed();\\n\\n    modifier isNotPlayer() {\\n        if(players[msg.sender].playerAddr != address(0)) {\\n            revert CardBattle__IsPlayerAlready();\\n        }\\n        _;\\n    }\\n\\n    modifier playerOnly() {\\n        if(players[msg.sender].playerAddr == address(0)) {\\n            revert CardBattle__NotPlayer();\\n        }\\n        _;\\n    }\\n\\n    modifier notInBattle() {\\n        if(players[msg.sender].isInBattle) {\\n            revert CardBattle__InBattleAlready();\\n        }\\n        _;\\n    }\\n\\n    modifier inBattle() {\\n        if(!players[msg.sender].isInBattle) {\\n            revert CardBattle__NotInBattle();\\n        }\\n        _;\\n    }\\n\\n    modifier inThisBattle(uint256 battleId) {\\n        address player1 = battles[battleId].playerAddrs[0];\\n        address player2 = battles[battleId].playerAddrs[1];\\n        if(msg.sender != player1 && msg.sender != player2) {\\n            revert CardBattle__NotInThisBattle();\\n        }\\n        _;\\n    }\\n\\n    //tokensArr = [[0, 0],[8, 2],[7, 3],[7, 3],[6, 4],[6, 4],[5, 5],[5, 5],[1, 0],[0, 1]]\\n    constructor(Token[] memory tokensArr, address gameTokensAddress) {\\n        _setUpTokens(tokensArr);\\n        gameTokensContract = GameTokens(gameTokensAddress);\\n    }\\n\\n    function _setUpTokens(Token[] memory tokensArr) internal {\\n        for (uint8 i = 0; i <tokensArr.length; i++) {\\n            tokens[i].attack = tokensArr[i].attack;\\n            tokens[i].defense = tokensArr[i].defense;\\n        }\\n    }\\n\\n    function registerPlayer() external isNotPlayer{\\n        players[msg.sender].playerAddr = msg.sender;\\n        emit RegisteredPlayer(msg.sender, block.timestamp);\\n    }\\n\\n    function mintCharacter() external payable playerOnly nonReentrant{\\n        if (msg.value != characterPrice) {\\n            revert CardBattle__SentWrongValue();\\n        }\\n        uint256 characterId = _createRandomNum(7, msg.sender);\\n        gameTokensContract.mint(msg.sender, characterId, 1, \\\"\\\");\\n        ownedTokens[msg.sender][characterId]++;\\n        lastMintedChar = characterId;\\n        emit MintedCharacter(msg.sender, characterId, block.timestamp);\\n    }\\n\\n    function mintTreasure(uint256 treasureId, uint256 amount) external payable playerOnly nonReentrant{\\n        if (msg.value != treasurePrice * amount) {\\n            revert CardBattle__SentWrongValue();\\n        }\\n        gameTokensContract.mint(msg.sender, treasureId, amount, \\\"\\\");\\n        ownedTokens[msg.sender][treasureId] += amount;\\n        emit MintedTreasure(msg.sender, treasureId, block.timestamp);\\n    }\\n\\n    // function buyBattles(uint256 amount) external payable playerOnly{\\n    //     if (msg.value != battlePrice * amount) {\\n    //         revert CardBattle__SentWrongValue();\\n    //     }\\n    //     players[msg.sender].battleTimes += amount;\\n    // }\\n\\n    function pickCharacter(uint256 characterId) external playerOnly{\\n        if (ownedTokens[msg.sender][characterId] <= 0){\\n            revert CardBattle__OwnNoCharacter();\\n        } \\n        players[msg.sender].battleTokens[0] = characterId;\\n        emit PickedCharacter(msg.sender, characterId, block.timestamp);\\n    }\\n    //id for Berserk is 8\\n    function useBerserk() external playerOnly{\\n        if (ownedTokens[msg.sender][8] <= 0){\\n            revert CardBattle__OwnNoSuchTreasure();\\n        } \\n        ownedTokens[msg.sender][8]--;\\n        gameTokensContract.burn(msg.sender, 8, 1);\\n        players[msg.sender].battleTokens[1] = 8;\\n        emit UsedBerserk(msg.sender, 8, block.timestamp);\\n    }\\n    //id for Berserk is 9\\n     function useForceShield() external playerOnly{\\n        if (ownedTokens[msg.sender][9] <= 0){\\n            revert CardBattle__OwnNoSuchTreasure();\\n        } \\n        ownedTokens[msg.sender][9]--;\\n        gameTokensContract.burn(msg.sender, 9, 1);\\n        players[msg.sender].battleTokens[2] = 9;\\n        emit UsedForceShield(msg.sender, 9, block.timestamp);\\n    }\\n\\n    function playGame() external playerOnly notInBattle{\\n        // if (players[msg.sender].battleTimes <= 0) {\\n        //     revert CardBattle__NeedToBuyBattles();\\n        // }\\n        //players[msg.sender].battleTimes--;\\n        uint256 characterId = players[msg.sender].battleTokens[0];\\n        if (characterId == 0) {\\n            revert CardBattle__RequireCharacterToPlay();\\n        }\\n        uint256 treasureId1 = players[msg.sender].battleTokens[1];\\n        uint256 treasureId2 = players[msg.sender].battleTokens[2];\\n        players[msg.sender].battleAttack = tokens[characterId].attack + tokens[treasureId1].attack;\\n        players[msg.sender].battleDefense = tokens[characterId].defense + tokens[treasureId2].defense;\\n        players[msg.sender].health = 10;\\n        players[msg.sender].energy = 10;\\n        players[msg.sender].isInBattle = true;\\n\\n        if (waitingBattleId == 0) {\\n            players[msg.sender].battleMoveId = 0;\\n            uint256 battleId = nextBattleId;\\n            nextBattleId++;\\n            battles[battleId].playerAddrs[0] = msg.sender;\\n            waitingBattleId = battleId;\\n            emit StartedBattle(msg.sender, address(0), battleId, 0, block.timestamp);\\n        } else {\\n            players[msg.sender].battleMoveId = 1;\\n            uint256 battleId = waitingBattleId;\\n            address player1 = battles[battleId].playerAddrs[0];\\n            delete waitingBattleId;\\n            battles[battleId].playerAddrs[1] = msg.sender;\\n            battles[battleId].battleStatus = BattleStatus.STARTED;\\n            emit StartedBattle(player1, msg.sender, battleId, 1, block.timestamp);\\n        }\\n    }\\n\\n    function makeMove(uint256 battleId, Choice choice) external playerOnly inBattle inThisBattle(battleId){\\n        if (battles[battleId].battleStatus != BattleStatus.STARTED) {\\n            revert CardBattle__StatusNotCorrect();\\n        }\\n        if (choice == Choice.NO) {\\n            revert CardBattle__CannotChoiceNo();\\n        }\\n        uint8 battleMoveId = players[msg.sender].battleMoveId;\\n        if (battles[battleId].moves[battleMoveId] != Choice.NO){\\n            revert CardBattle__MadeMoveAlready();\\n        }\\n        battles[battleId].moves[battleMoveId] = choice;\\n        if (battles[battleId].moves[0] != Choice.NO && battles[battleId].moves[1] != Choice.NO) {\\n            _updateGame(battleId);\\n        }\\n        emit MadeMove(battleId, msg.sender, choice);\\n    }\\n\\n    function _updateGame(uint256 battleId) internal {\\n        address player1Addr = battles[battleId].playerAddrs[0];\\n        address player2Addr = battles[battleId].playerAddrs[1];\\n        Player storage player1 = players[player1Addr];\\n        Player storage player2 = players[player2Addr];\\n        Choice move1 = battles[battleId].moves[0]; \\n        Choice move2 = battles[battleId].moves[1]; \\n        battles[battleId].moves[0] = Choice.NO;\\n        battles[battleId].moves[1] = Choice.NO;\\n        if (move1 == Choice.ATTACK && move2 == Choice.ATTACK) {\\n            player1.health = player1.health - player2.battleAttack;\\n            player2.health = player2.health - player1.battleAttack;\\n            if (player1.health > 0 && player2.health <= 0) {\\n                battles[battleId].winner = player1.playerAddr;\\n                _endBattle(battleId, player1Addr, player2Addr);\\n            } else if (player1.health <= 0 && player2.health > 0) {\\n                battles[battleId].winner = player2.playerAddr;\\n                _endBattle(battleId, player1Addr, player2Addr);\\n            } else if (player1.health <= 0 && player2.health <= 0) {\\n                _endBattle(battleId, player1Addr, player2Addr);\\n            }\\n            player1.energy -= 2;\\n            player2.energy -= 2;\\n            if (player1.energy == 0) {\\n                if (player1.health > player2.health) {\\n                    battles[battleId].winner = player1.playerAddr;\\n                    _endBattle(battleId, player1Addr, player2Addr);\\n                } else if (player1.health < player2.health) {\\n                    battles[battleId].winner = player2.playerAddr;\\n                    _endBattle(battleId, player1Addr, player2Addr);\\n                }\\n                _endBattle(battleId, player1Addr, player2Addr);\\n            }\\n        } else if(move1 == Choice.ATTACK && move2 == Choice.DEFENSE) {\\n            player2.health = player2.health - player1.battleAttack + player2.battleDefense;\\n            if (player1.health > 0 && player2.health <= 0) {\\n                battles[battleId].winner = player1.playerAddr;\\n                _endBattle(battleId, player1Addr, player2Addr);\\n            } else if (player1.health <= 0 && player2.health > 0) {\\n                battles[battleId].winner = player2.playerAddr;\\n                _endBattle(battleId, player1Addr, player2Addr);\\n            } else if (player1.health <= 0 && player2.health <= 0) {\\n                _endBattle(battleId, player1Addr, player2Addr);\\n            }\\n            player1.energy -= 2;\\n            player2.energy -= 2;\\n            if (player1.energy == 0) {\\n                if (player1.health > player2.health) {\\n                    battles[battleId].winner = player1.playerAddr;\\n                    _endBattle(battleId, player1Addr, player2Addr);\\n                } else if (player1.health < player2.health) {\\n                    battles[battleId].winner = player2.playerAddr;\\n                    _endBattle(battleId, player1Addr, player2Addr);\\n                }\\n                _endBattle(battleId, player1Addr, player2Addr);\\n            }\\n        } else if(move1 == Choice.DEFENSE && move2 == Choice.ATTACK) {\\n            player1.health = player1.health - player2.battleAttack + player1.battleDefense;\\n            if (player1.health > 0 && player2.health <= 0) {\\n                battles[battleId].winner = player1.playerAddr;\\n                _endBattle(battleId, player1Addr, player2Addr);\\n            } else if (player1.health <= 0 && player2.health > 0) {\\n                battles[battleId].winner = player2.playerAddr;\\n                _endBattle(battleId, player1Addr, player2Addr);\\n            } else if (player1.health <= 0 && player2.health <= 0) {\\n                _endBattle(battleId, player1Addr, player2Addr);\\n            }\\n            player1.energy -= 2;\\n            player2.energy -= 2;\\n            if (player1.energy == 0) {\\n                if (player1.health > player2.health) {\\n                    battles[battleId].winner = player1.playerAddr;\\n                    _endBattle(battleId, player1Addr, player2Addr);\\n                } else if (player1.health < player2.health) {\\n                    battles[battleId].winner = player2.playerAddr;\\n                    _endBattle(battleId, player1Addr, player2Addr);\\n                }\\n               _endBattle(battleId, player1Addr, player2Addr);\\n            }\\n        } else if(move1 == Choice.DEFENSE && move2 == Choice.DEFENSE) {\\n            player1.energy -= 2;\\n            player2.energy -= 2;\\n            if (player1.energy == 0) {\\n                if (player1.health > player2.health) {\\n                    battles[battleId].winner = player1.playerAddr;\\n                    _endBattle(battleId, player1Addr, player2Addr);\\n                } else if (player1.health < player2.health) {\\n                    battles[battleId].winner = player2.playerAddr;\\n                    _endBattle(battleId, player1Addr, player2Addr);\\n                }\\n                _endBattle(battleId, player1Addr, player2Addr);\\n            }\\n        }\\n        emit UpdatedGame(battleId, player1Addr, player1Addr, block.timestamp);\\n    }\\n\\n    function _endBattle(uint256 battleId, address player1Addr, address player2Addr) internal {\\n        address winner = battles[battleId].winner;\\n        Player storage player1 = players[player1Addr];\\n        Player storage player2 = players[player2Addr];\\n\\n        player1.isInBattle = false;\\n        player2.isInBattle = false;\\n        battles[battleId].battleStatus = BattleStatus.ENDED;\\n        emit EndedBattle(battleId, winner, block.timestamp);\\n    }\\n\\n    //internal function to generate a random number\\n    function _createRandomNum(uint256 _max, address _sender) internal view returns (uint256 randomValue) {\\n        uint256 randomNum = uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, _sender)));\\n        randomValue = randomNum % _max;\\n        //we want it from 1 to _max\\n        return randomValue + 1;\\n    }\\n\\n    function ownerWithdraw() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        (bool sentOwner,) = payable(msg.sender).call{value:balance}(\\\"\\\");\\n        if (!sentOwner) {\\n            revert CardBattle__SentOwnerFailed();\\n        }\\n        emit WithdrewByOwner(msg.sender, balance, block.timestamp);\\n    }\\n\\n    function deletePlayer(address playerAddr) external onlyOwner {\\n        delete players[playerAddr];\\n    }\\n\\n    function deleteBattle(uint256 battleId) external onlyOwner {\\n        delete battles[battleId];\\n    }\\n\\n    function isPlayer(address playerAddr) public view returns (bool) {\\n        return players[playerAddr].playerAddr != address(0);\\n    }\\n\\n    function getToken(uint256 tokenId) external view returns (Token memory){\\n        return tokens[tokenId];\\n    }\\n\\n    function getPlayer(address playerAddr) external view returns (Player memory){\\n        return players[playerAddr];\\n    }\\n\\n    function getBattle(uint256 battleId) external view returns (Battle memory) {\\n        return battles[battleId];\\n    }\\n\\n    function getBattleStatus(uint256 battleId) external view returns (BattleStatus) {\\n        return battles[battleId].battleStatus;\\n    }\\n\\n    function getNextBattleId() external view returns (uint256) {\\n        return nextBattleId;\\n    }\\n\\n    function getWaitingBattleId() external view returns (uint256) {\\n        return waitingBattleId;\\n    }\\n\\n    function getOwnedTokenAmount(address playerAddr, uint256 tokenId) external view returns(uint256) {\\n        return ownedTokens[playerAddr][tokenId];\\n    }\\n\\n    function getContractBalance() external view returns(uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getLastMintedChar() external view returns(uint256) {\\n        return lastMintedChar;\\n    }\\n\\n    function getPlayerBattleTokens(address playerAddr) external view returns(uint256[3] memory) {\\n        return players[playerAddr].battleTokens;\\n    }\\n}\\n\",\"keccak256\":\"0xc22edce816abc0cc55aa1ed8dce23a0838c865d8dfa3bdccf322f52036cd07da\",\"license\":\"MIT\"},\"contracts/GameTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract GameTokens is ERC1155, Ownable {\\n    //set up ERC1155 tokenIds from 1 to 9\\n    uint256 public constant Jeff = 1;\\n    uint256 public constant Charlie = 2;\\n    uint256 public constant Henley = 3;\\n    uint256 public constant Jack = 4;\\n    uint256 public constant Bob = 5;\\n    uint256 public constant Sophie = 6;\\n    uint256 public constant Steve = 7;\\n    uint256 public constant Berserk = 8;\\n    uint256 public constant ForceShield = 9;\\n\\n    constructor() ERC1155(\\\"ipfs://QmdBAAW5AJ8Yv2zyZYeeQ1bdYUsNQDjxpsTKt3MfmnHhwg/{id}.json\\\") {\\n        \\n    }\\n\\n    function mint(address account, uint256 id, uint256 amount, bytes memory data)\\n        public\\n    {\\n        _mint(account, id, amount, data);\\n    }\\n\\n    function burn(address account, uint256 id, uint256 amount)\\n        public\\n    {\\n        _burn(account, id, amount);\\n    }\\n\\n}\",\"keccak256\":\"0x831011025600065d16676d7520df6c5d6979deebbb12711fa0d839e82f92cb19\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c80637d3bb30b11610102578063cbf5fd2e11610095578063f23a6e6111610064578063f23a6e6114610679578063f2fde38b146106b6578063faf039f4146106df578063fc750e67146106e9576101d8565b8063cbf5fd2e14610597578063d618bb6d146105c2578063e4b50cb8146105ff578063e8c62e611461063c576101d8565b806390aee14d116100d157806390aee14d146104db578063abdef39914610518578063af89973514610543578063bc197c811461055a576101d8565b80637d3bb30b146104335780637fd6f7c41461045e5780638da5cb5b14610487578063905da9ef146104b2576101d8565b80634fc2baaf1161017a578063619df25911610149578063619df2591461038b5780636dd0ce7a146103b45780636f9fb98a146103f1578063715018a61461041c576101d8565b80634fc2baaf146103045780635b1569341461031b5780635c07a4b0146103375780635c12cd4b1461034e576101d8565b806312243b67116101b657806312243b67146102825780633f647250146102ab5780634311de8f146102c25780634fb8d38b146102d9576101d8565b806301ffc9a7146101dd57806304a362ad1461021a57806309c95e1014610245575b600080fd5b3480156101e957600080fd5b5061020460048036038101906101ff919061468b565b610714565b60405161021191906146d3565b60405180910390f35b34801561022657600080fd5b5061022f61078e565b60405161023c9190614707565b60405180910390f35b34801561025157600080fd5b5061026c60048036038101906102679190614780565b610798565b60405161027991906146d3565b60405180910390f35b34801561028e57600080fd5b506102a960048036038101906102a49190614780565b610833565b005b3480156102b757600080fd5b506102c061092f565b005b3480156102ce57600080fd5b506102d7610c29565b005b3480156102e557600080fd5b506102ee610d18565b6040516102fb9190614707565b60405180910390f35b34801561031057600080fd5b50610319610d22565b005b610335600480360381019061033091906147d9565b61101c565b005b34801561034357600080fd5b5061034c611288565b005b34801561035a57600080fd5b5061037560048036038101906103709190614780565b611421565b60405161038291906149be565b60405180910390f35b34801561039757600080fd5b506103b260048036038101906103ad91906149da565b6115c2565b005b3480156103c057600080fd5b506103db60048036038101906103d691906149da565b61163e565b6040516103e89190614c53565b60405180910390f35b3480156103fd57600080fd5b506104066117f1565b6040516104139190614707565b60405180910390f35b34801561042857600080fd5b506104316117f9565b005b34801561043f57600080fd5b5061044861180d565b6040516104559190614707565b60405180910390f35b34801561046a57600080fd5b5061048560048036038101906104809190614c93565b611817565b005b34801561049357600080fd5b5061049c611e0b565b6040516104a99190614ce2565b60405180910390f35b3480156104be57600080fd5b506104d960048036038101906104d491906149da565b611e34565b005b3480156104e757600080fd5b5061050260048036038101906104fd91906149da565b612034565b60405161050f9190614d0c565b60405180910390f35b34801561052457600080fd5b5061052d612061565b60405161053a9190614707565b60405180910390f35b34801561054f57600080fd5b5061055861206c565b005b34801561056657600080fd5b50610581600480360381019061057c9190614f35565b6128b3565b60405161058e9190615013565b60405180910390f35b3480156105a357600080fd5b506105ac6128c8565b6040516105b9919061508d565b60405180910390f35b3480156105ce57600080fd5b506105e960048036038101906105e491906150a8565b6128ec565b6040516105f69190614707565b60405180910390f35b34801561060b57600080fd5b50610626600480360381019061062191906149da565b612947565b6040516106339190615117565b60405180910390f35b34801561064857600080fd5b50610663600480360381019061065e9190614780565b6129ae565b6040516106709190615194565b60405180910390f35b34801561068557600080fd5b506106a0600480360381019061069b91906151af565b612a3b565b6040516106ad9190615013565b60405180910390f35b3480156106c257600080fd5b506106dd60048036038101906106d89190614780565b612a50565b005b6106e7612ad3565b005b3480156106f557600080fd5b506106fe612d4a565b60405161070b9190614707565b60405180910390f35b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610787575061078682612d54565b5b9050919050565b65b5e620f4800081565b60008073ffffffffffffffffffffffffffffffffffffffff16600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b61083b612dbe565b600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff02191690556000820160156101000a81549060ff02191690556001820160006108da91906144a7565b6004820160006101000a81549060ff02191690556004820160016101000a81549060ff02191690556004820160026101000a81549060ff02191690556004820160036101000a81549060ff0219169055505050565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036109f7576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600981526020019081526020016000205411610a82576040517f2754a9c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600981526020019081526020016000206000815480929190610ae490615275565b91905055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5298aca33600960016040518463ffffffff1660e01b8152600401610b4893929190615314565b600060405180830381600087803b158015610b6257600080fd5b505af1158015610b76573d6000803e3d6000fd5b505050506009600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600260038110610bd157610bd061534b565b5b01819055503373ffffffffffffffffffffffffffffffffffffffff167f7b83ed03e9bcf1e33b670041e6cd2145bf2fb63cb9d73b17d3e6dd3c714b3fc9600942604051610c1f92919061537a565b60405180910390a2565b610c31612dbe565b600047905060003373ffffffffffffffffffffffffffffffffffffffff1682604051610c5c906153d4565b60006040518083038185875af1925050503d8060008114610c99576040519150601f19603f3d011682016040523d82523d6000602084013e610c9e565b606091505b5050905080610cd9576040517fd13ab74a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fed567091ef7b09c7e58c1282f9bce864ddd50be3842439ec2d2f3d6b37d18701338342604051610d0c939291906153e9565b60405180910390a15050565b6000600254905090565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610dea576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600881526020019081526020016000205411610e75576040517f2754a9c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600881526020019081526020016000206000815480929190610ed790615275565b91905055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5298aca33600860016040518463ffffffff1660e01b8152600401610f3b9392919061545b565b600060405180830381600087803b158015610f5557600080fd5b505af1158015610f69573d6000803e3d6000fd5b505050506008600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600160038110610fc457610fc361534b565b5b01819055503373ffffffffffffffffffffffffffffffffffffffff167f23ca515fd57b4f9d87941acac83de880277df088b8a70c05fb6907054939e6af600842604051611012929190615492565b60405180910390a2565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036110e4576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110ec612e3c565b8065b5e620f480006110fe91906154bb565b3414611136576040517fbcee9f2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663731133e93384846040518463ffffffff1660e01b815260040161119393929190615531565b600060405180830381600087803b1580156111ad57600080fd5b505af11580156111c1573d6000803e3d6000fd5b5050505080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000206000828254611225919061557b565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167ff88d695e8fde0968323786f547ecd715551b6532507196c3bf7ca9d9275c88d183426040516112749291906155af565b60405180910390a2611284612e8b565b5050565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611350576040517f9d78e0b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0d145d16b2bc227dbba053ee8ebad2364e38aebbf3cfe1f04b32b1e2996e5ea2426040516114179190614707565b60405180910390a2565b6114296144bc565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460000b60000b60000b81526020016000820160159054906101000a900460000b60000b60000b815260200160018201600380602002604051908101604052809291908260038015611540576020028201915b81548152602001906001019080831161152c575b505050505081526020016004820160009054906101000a900460000b60000b60000b81526020016004820160019054906101000a900460000b60000b60000b81526020016004820160029054906101000a900460ff1660ff1660ff1681526020016004820160039054906101000a900460ff1615151515815250509050919050565b6115ca612dbe565b60076000828152602001908152602001600020600080820160006115ee919061452a565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160146101000a81549060ff02191690556003820160006116399190614538565b505050565b61164661453f565b60076000838152602001908152602001600020604051806080016040529081600082016002806020026040519081016040528092919082600280156116d6576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161168c575b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff16600281111561175a57611759614aa3565b5b600281111561176c5761176b614aa3565b5b8152602001600382016002806020026040519081016040528092919082600280156117e1576020028201916000905b82829054906101000a900460ff1660028111156117bb576117ba614aa3565b5b8152602001906001019060208260000104928301926001038202915080841161179b5790505b5050505050815250509050919050565b600047905090565b611801612dbe565b61180b6000612e94565b565b6000600454905090565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036118df576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160039054906101000a900460ff16611965576040517f9b7fbe9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816000600760008381526020019081526020016000206000016000600281106119915761199061534b565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600760008481526020019081526020016000206000016001600281106119e0576119df61534b565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015611a6c57508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611aa3576040517f7ca5450900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002811115611ab757611ab6614aa3565b5b6007600087815260200190815260200160002060020160149054906101000a900460ff166002811115611aed57611aec614aa3565b5b14611b24576040517f37e3281d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002811115611b3857611b37614aa3565b5b846002811115611b4b57611b4a614aa3565b5b03611b82576040517fed7613ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160029054906101000a900460ff16905060006002811115611bea57611be9614aa3565b5b600760008881526020019081526020016000206003018260ff1660028110611c1557611c1461534b565b5b602091828204019190069054906101000a900460ff166002811115611c3d57611c3c614aa3565b5b14611c74576040517f1c85e56200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600760008881526020019081526020016000206003018260ff1660028110611ca057611c9f61534b565b5b602091828204019190066101000a81548160ff02191690836002811115611cca57611cc9614aa3565b5b021790555060006002811115611ce357611ce2614aa3565b5b60076000888152602001908152602001600020600301600060028110611d0c57611d0b61534b565b5b602091828204019190069054906101000a900460ff166002811115611d3457611d33614aa3565b5b14158015611da5575060006002811115611d5157611d50614aa3565b5b60076000888152602001908152602001600020600301600160028110611d7a57611d7961534b565b5b602091828204019190069054906101000a900460ff166002811115611da257611da1614aa3565b5b14155b15611db457611db386612f58565b5b3373ffffffffffffffffffffffffffffffffffffffff16867f7cce76b36739f2e703126de26b37bba6e1a332953b40d796a2058f482fb5362287604051611dfb91906155e7565b60405180910390a3505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611efc576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000205411611f86576040517f544254ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600060038110611fdc57611fdb61534b565b5b01819055503373ffffffffffffffffffffffffffffffffffffffff167fb3012bb2b4139f1d80373a1382f04ab76c690cc179e20eb81aebe57b52d2935982426040516120299291906155af565b60405180910390a250565b60006007600083815260200190815260200160002060020160149054906101000a900460ff169050919050565b66038d7ea4c6800081565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612134576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160039054906101000a900460ff16156121bb576040517f4eeb02c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000600381106122125761221161534b565b5b0154905060008103612250576040517f950e869a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016001600381106122a7576122a661534b565b5b015490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016002600381106123025761230161534b565b5b015490506008600083815260200190815260200160002060000160009054906101000a900460000b6008600085815260200190815260200160002060000160009054906101000a900460000b6123589190615602565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff021916908360000b60ff1602179055506008600082815260200190815260200160002060000160019054906101000a900460000b6008600085815260200190815260200160002060000160019054906101000a900460000b6124079190615602565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160016101000a81548160ff021916908360000b60ff160217905550600a600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160146101000a81548160ff021916908360000b60ff160217905550600a600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160156101000a81548160ff021916908360000b60ff1602179055506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160036101000a81548160ff0219169083151502179055506000600454036126e2576000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160026101000a81548160ff021916908360ff16021790555060006002549050600260008154809291906125fd9061565b565b9190505550336007600083815260200190815260200160002060000160006002811061262c5761262b61534b565b5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060048190555080600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fef82c59cb38c86ed662cafdc0f88b4306113372c5e8feec91f78eefbcd9da22b6000426040516126d49291906156de565b60405180910390a4506128ae565b6001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160026101000a81548160ff021916908360ff160217905550600060045490506000600760008381526020019081526020016000206000016000600281106127705761276f61534b565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060046000905533600760008481526020019081526020016000206000016001600281106127c4576127c361534b565b5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016007600084815260200190815260200160002060020160146101000a81548160ff0219169083600281111561283d5761283c614aa3565b5b0217905550813373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fef82c59cb38c86ed662cafdc0f88b4306113372c5e8feec91f78eefbcd9da22b6001426040516128a3929190615738565b60405180910390a450505b505050565b600063bc197c8160e01b905095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b61294f61459b565b600860008381526020019081526020016000206040518060400160405290816000820160009054906101000a900460000b60000b60000b81526020016000820160019054906101000a900460000b60000b60000b815250509050919050565b6129b66145b9565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600380602002604051908101604052809291908260038015612a2f576020028201915b815481526020019060010190808311612a1b575b50505050509050919050565b600063f23a6e6160e01b905095945050505050565b612a58612dbe565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612ac7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612abe906157e4565b60405180910390fd5b612ad081612e94565b50565b600073ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612b9b576040517fc147f17700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612ba3612e3c565b66038d7ea4c680003414612be3576040517fbcee9f2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612bf06007336142b7565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663731133e9338360016040518463ffffffff1660e01b8152600401612c5093929190615804565b600060405180830381600087803b158015612c6a57600080fd5b505af1158015612c7e573d6000803e3d6000fd5b50505050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000206000815480929190612ce39061565b565b9190505550806003819055503373ffffffffffffffffffffffffffffffffffffffff167fd0ee0d61d7a6bc9cc77a29693bc662584583a6fb46d6b00759a94edfb621615a8242604051612d379291906155af565b60405180910390a250612d48612e8b565b565b6000600354905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612dc661430e565b73ffffffffffffffffffffffffffffffffffffffff16612de4611e0b565b73ffffffffffffffffffffffffffffffffffffffff1614612e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e319061589a565b60405180910390fd5b565b600260015403612e81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7890615906565b60405180910390fd5b6002600181905550565b60018081905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060076000838152602001908152602001600020600001600060028110612f8357612f8261534b565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060076000848152602001908152602001600020600001600160028110612fd257612fd161534b565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600760008781526020019081526020016000206003016000600281106130a7576130a661534b565b5b602091828204019190069054906101000a900460ff1690506000600760008881526020019081526020016000206003016001600281106130ea576130e961534b565b5b602091828204019190069054906101000a900460ff16905060006007600089815260200190815260200160002060030160006002811061312d5761312c61534b565b5b602091828204019190066101000a81548160ff0219169083600281111561315757613156614aa3565b5b02179055506000600760008981526020019081526020016000206003016001600281106131875761318661534b565b5b602091828204019190066101000a81548160ff021916908360028111156131b1576131b0614aa3565b5b0217905550600160028111156131ca576131c9614aa3565b5b8260028111156131dd576131dc614aa3565b5b14801561320e5750600160028111156131f9576131f8614aa3565b5b81600281111561320c5761320b614aa3565b5b145b1561369c578260040160009054906101000a900460000b8460000160149054906101000a900460000b6132419190615926565b8460000160146101000a81548160ff021916908360000b60ff1602179055508360040160009054906101000a900460000b8360000160149054906101000a900460000b61328e9190615926565b8360000160146101000a81548160ff021916908360000b60ff16021790555060008460000160149054906101000a900460000b60000b1380156132e6575060008360000160149054906101000a900460000b60000b13155b15613374578360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007600089815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061336f878787614316565b613488565b60008460000160149054906101000a900460000b60000b131580156133ad575060008360000160149054906101000a900460000b60000b135b1561343b578260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007600089815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613436878787614316565b613487565b60008460000160149054906101000a900460000b60000b13158015613475575060008360000160149054906101000a900460000b60000b13155b1561348657613485878787614316565b5b5b5b60028460000160158282829054906101000a900460000b6134a99190615926565b92506101000a81548160ff021916908360000b60ff16021790555060028360000160158282829054906101000a900460000b6134e59190615926565b92506101000a81548160ff021916908360000b60ff16021790555060008460000160159054906101000a900460000b60000b03613697578260000160149054906101000a900460000b60000b8460000160149054906101000a900460000b60000b13156135d5578360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007600089815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506135d0878787614316565b61368b565b8260000160149054906101000a900460000b60000b8460000160149054906101000a900460000b60000b121561368a578260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007600089815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613689878787614316565b5b5b613696878787614316565b5b614272565b600160028111156136b0576136af614aa3565b5b8260028111156136c3576136c2614aa3565b5b1480156136f357506002808111156136de576136dd614aa3565b5b8160028111156136f1576136f0614aa3565b5b145b15613b50578260040160019054906101000a900460000b8460040160009054906101000a900460000b8460000160149054906101000a900460000b6137389190615926565b6137429190615602565b8360000160146101000a81548160ff021916908360000b60ff16021790555060008460000160149054906101000a900460000b60000b13801561379a575060008360000160149054906101000a900460000b60000b13155b15613828578360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007600089815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613823878787614316565b61393c565b60008460000160149054906101000a900460000b60000b13158015613861575060008360000160149054906101000a900460000b60000b135b156138ef578260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007600089815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506138ea878787614316565b61393b565b60008460000160149054906101000a900460000b60000b13158015613929575060008360000160149054906101000a900460000b60000b13155b1561393a57613939878787614316565b5b5b5b60028460000160158282829054906101000a900460000b61395d9190615926565b92506101000a81548160ff021916908360000b60ff16021790555060028360000160158282829054906101000a900460000b6139999190615926565b92506101000a81548160ff021916908360000b60ff16021790555060008460000160159054906101000a900460000b60000b03613b4b578260000160149054906101000a900460000b60000b8460000160149054906101000a900460000b60000b1315613a89578360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007600089815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613a84878787614316565b613b3f565b8260000160149054906101000a900460000b60000b8460000160149054906101000a900460000b60000b1215613b3e578260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007600089815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613b3d878787614316565b5b5b613b4a878787614316565b5b614271565b600280811115613b6357613b62614aa3565b5b826002811115613b7657613b75614aa3565b5b148015613ba7575060016002811115613b9257613b91614aa3565b5b816002811115613ba557613ba4614aa3565b5b145b15614004578360040160019054906101000a900460000b8360040160009054906101000a900460000b8560000160149054906101000a900460000b613bec9190615926565b613bf69190615602565b8460000160146101000a81548160ff021916908360000b60ff16021790555060008460000160149054906101000a900460000b60000b138015613c4e575060008360000160149054906101000a900460000b60000b13155b15613cdc578360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007600089815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613cd7878787614316565b613df0565b60008460000160149054906101000a900460000b60000b13158015613d15575060008360000160149054906101000a900460000b60000b135b15613da3578260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007600089815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613d9e878787614316565b613def565b60008460000160149054906101000a900460000b60000b13158015613ddd575060008360000160149054906101000a900460000b60000b13155b15613dee57613ded878787614316565b5b5b5b60028460000160158282829054906101000a900460000b613e119190615926565b92506101000a81548160ff021916908360000b60ff16021790555060028360000160158282829054906101000a900460000b613e4d9190615926565b92506101000a81548160ff021916908360000b60ff16021790555060008460000160159054906101000a900460000b60000b03613fff578260000160149054906101000a900460000b60000b8460000160149054906101000a900460000b60000b1315613f3d578360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007600089815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613f38878787614316565b613ff3565b8260000160149054906101000a900460000b60000b8460000160149054906101000a900460000b60000b1215613ff2578260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007600089815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613ff1878787614316565b5b5b613ffe878787614316565b5b614270565b60028081111561401757614016614aa3565b5b82600281111561402a57614029614aa3565b5b14801561405a575060028081111561404557614044614aa3565b5b81600281111561405857614057614aa3565b5b145b1561426f5760028460000160158282829054906101000a900460000b6140809190615926565b92506101000a81548160ff021916908360000b60ff16021790555060028360000160158282829054906101000a900460000b6140bc9190615926565b92506101000a81548160ff021916908360000b60ff16021790555060008460000160159054906101000a900460000b60000b0361426e578260000160149054906101000a900460000b60000b8460000160149054906101000a900460000b60000b13156141ac578360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007600089815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506141a7878787614316565b614262565b8260000160149054906101000a900460000b60000b8460000160149054906101000a900460000b60000b1215614261578260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007600089815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614260878787614316565b5b5b61426d878787614316565b5b5b5b5b5b867fd0edf6ab6222e585f55eab3bd937f99e826844ad7a9e9f33ee3f79b0d0494ca68788426040516142a69392919061597f565b60405180910390a250505050505050565b6000804442846040516020016142cf93929190615a1f565b6040516020818303038152906040528051906020012060001c905083816142f69190615a8b565b9150600182614305919061557b565b91505092915050565b600033905090565b60006007600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008260040160036101000a81548160ff02191690831515021790555060008160040160036101000a81548160ff02191690831515021790555060026007600088815260200190815260200160002060020160146101000a81548160ff0219169083600281111561444b5761444a614aa3565b5b02179055508273ffffffffffffffffffffffffffffffffffffffff16867f7ab763991403f1ab5ef7acc377fba3a65b3c9a4b4cd6c17c86bc00898cd67711426040516144979190614707565b60405180910390a3505050505050565b50600081556001016000815560010160009055565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000800b81526020016000800b81526020016144ff6145b9565b81526020016000800b81526020016000800b8152602001600060ff1681526020016000151581525090565b506000815560010160009055565b5060009055565b60405180608001604052806145526145db565b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600281111561458857614587614aa3565b5b81526020016145956145fd565b81525090565b60405180604001604052806000800b81526020016000800b81525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61466881614633565b811461467357600080fd5b50565b6000813590506146858161465f565b92915050565b6000602082840312156146a1576146a0614629565b5b60006146af84828501614676565b91505092915050565b60008115159050919050565b6146cd816146b8565b82525050565b60006020820190506146e860008301846146c4565b92915050565b6000819050919050565b614701816146ee565b82525050565b600060208201905061471c60008301846146f8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061474d82614722565b9050919050565b61475d81614742565b811461476857600080fd5b50565b60008135905061477a81614754565b92915050565b60006020828403121561479657614795614629565b5b60006147a48482850161476b565b91505092915050565b6147b6816146ee565b81146147c157600080fd5b50565b6000813590506147d3816147ad565b92915050565b600080604083850312156147f0576147ef614629565b5b60006147fe858286016147c4565b925050602061480f858286016147c4565b9150509250929050565b61482281614742565b82525050565b60008160000b9050919050565b61483e81614828565b82525050565b600060039050919050565b600081905092915050565b6000819050919050565b61486d816146ee565b82525050565b600061487f8383614864565b60208301905092915050565b6000602082019050919050565b6148a181614844565b6148ab818461484f565b92506148b68261485a565b8060005b838110156148e75781516148ce8782614873565b96506148d98361488b565b9250506001810190506148ba565b505050505050565b600060ff82169050919050565b614905816148ef565b82525050565b614914816146b8565b82525050565b610140820160008201516149316000850182614819565b5060208201516149446020850182614835565b5060408201516149576040850182614835565b50606082015161496a6060850182614898565b50608082015161497d60c0850182614835565b5060a082015161499060e0850182614835565b5060c08201516149a46101008501826148fc565b5060e08201516149b861012085018261490b565b50505050565b6000610140820190506149d4600083018461491a565b92915050565b6000602082840312156149f0576149ef614629565b5b60006149fe848285016147c4565b91505092915050565b600060029050919050565b600081905092915050565b6000819050919050565b6000614a338383614819565b60208301905092915050565b6000602082019050919050565b614a5581614a07565b614a5f8184614a12565b9250614a6a82614a1d565b8060005b83811015614a9b578151614a828782614a27565b9650614a8d83614a3f565b925050600181019050614a6e565b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110614ae357614ae2614aa3565b5b50565b6000819050614af482614ad2565b919050565b6000614b0482614ae6565b9050919050565b614b1481614af9565b82525050565b600060029050919050565b600081905092915050565b6000819050919050565b60038110614b4b57614b4a614aa3565b5b50565b6000819050614b5c82614b3a565b919050565b6000614b6c82614b4e565b9050919050565b614b7c81614b61565b82525050565b6000614b8e8383614b73565b60208301905092915050565b6000602082019050919050565b614bb081614b1a565b614bba8184614b25565b9250614bc582614b30565b8060005b83811015614bf6578151614bdd8782614b82565b9650614be883614b9a565b925050600181019050614bc9565b505050505050565b60c082016000820151614c146000850182614a4c565b506020820151614c276040850182614819565b506040820151614c3a6060850182614b0b565b506060820151614c4d6080850182614ba7565b50505050565b600060c082019050614c686000830184614bfe565b92915050565b60038110614c7b57600080fd5b50565b600081359050614c8d81614c6e565b92915050565b60008060408385031215614caa57614ca9614629565b5b6000614cb8858286016147c4565b9250506020614cc985828601614c7e565b9150509250929050565b614cdc81614742565b82525050565b6000602082019050614cf76000830184614cd3565b92915050565b614d0681614af9565b82525050565b6000602082019050614d216000830184614cfd565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b614d7582614d2c565b810181811067ffffffffffffffff82111715614d9457614d93614d3d565b5b80604052505050565b6000614da761461f565b9050614db38282614d6c565b919050565b600067ffffffffffffffff821115614dd357614dd2614d3d565b5b602082029050602081019050919050565b600080fd5b6000614dfc614df784614db8565b614d9d565b90508083825260208201905060208402830185811115614e1f57614e1e614de4565b5b835b81811015614e485780614e3488826147c4565b845260208401935050602081019050614e21565b5050509392505050565b600082601f830112614e6757614e66614d27565b5b8135614e77848260208601614de9565b91505092915050565b600080fd5b600067ffffffffffffffff821115614ea057614e9f614d3d565b5b614ea982614d2c565b9050602081019050919050565b82818337600083830152505050565b6000614ed8614ed384614e85565b614d9d565b905082815260208101848484011115614ef457614ef3614e80565b5b614eff848285614eb6565b509392505050565b600082601f830112614f1c57614f1b614d27565b5b8135614f2c848260208601614ec5565b91505092915050565b600080600080600060a08688031215614f5157614f50614629565b5b6000614f5f8882890161476b565b9550506020614f708882890161476b565b945050604086013567ffffffffffffffff811115614f9157614f9061462e565b5b614f9d88828901614e52565b935050606086013567ffffffffffffffff811115614fbe57614fbd61462e565b5b614fca88828901614e52565b925050608086013567ffffffffffffffff811115614feb57614fea61462e565b5b614ff788828901614f07565b9150509295509295909350565b61500d81614633565b82525050565b60006020820190506150286000830184615004565b92915050565b6000819050919050565b600061505361504e61504984614722565b61502e565b614722565b9050919050565b600061506582615038565b9050919050565b60006150778261505a565b9050919050565b6150878161506c565b82525050565b60006020820190506150a2600083018461507e565b92915050565b600080604083850312156150bf576150be614629565b5b60006150cd8582860161476b565b92505060206150de858286016147c4565b9150509250929050565b6040820160008201516150fe6000850182614835565b5060208201516151116020850182614835565b50505050565b600060408201905061512c60008301846150e8565b92915050565b600081905092915050565b61514681614844565b6151508184615132565b925061515b8261485a565b8060005b8381101561518c5781516151738782614873565b965061517e8361488b565b92505060018101905061515f565b505050505050565b60006060820190506151a9600083018461513d565b92915050565b600080600080600060a086880312156151cb576151ca614629565b5b60006151d98882890161476b565b95505060206151ea8882890161476b565b94505060406151fb888289016147c4565b935050606061520c888289016147c4565b925050608086013567ffffffffffffffff81111561522d5761522c61462e565b5b61523988828901614f07565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000615280826146ee565b91506000820361529357615292615246565b5b600182039050919050565b6000819050919050565b60006152c36152be6152b98461529e565b61502e565b6146ee565b9050919050565b6152d3816152a8565b82525050565b6000819050919050565b60006152fe6152f96152f4846152d9565b61502e565b6146ee565b9050919050565b61530e816152e3565b82525050565b60006060820190506153296000830186614cd3565b61533660208301856152ca565b6153436040830184615305565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060408201905061538f60008301856152ca565b61539c60208301846146f8565b9392505050565b600081905092915050565b50565b60006153be6000836153a3565b91506153c9826153ae565b600082019050919050565b60006153df826153b1565b9150819050919050565b60006060820190506153fe6000830186614cd3565b61540b60208301856146f8565b61541860408301846146f8565b949350505050565b6000819050919050565b600061544561544061543b84615420565b61502e565b6146ee565b9050919050565b6154558161542a565b82525050565b60006060820190506154706000830186614cd3565b61547d602083018561544c565b61548a6040830184615305565b949350505050565b60006040820190506154a7600083018561544c565b6154b460208301846146f8565b9392505050565b60006154c6826146ee565b91506154d1836146ee565b92508282026154df816146ee565b915082820484148315176154f6576154f5615246565b5b5092915050565b600082825260208201905092915050565b600061551b6000836154fd565b9150615526826153ae565b600082019050919050565b60006080820190506155466000830186614cd3565b61555360208301856146f8565b61556060408301846146f8565b81810360608301526155718161550e565b9050949350505050565b6000615586826146ee565b9150615591836146ee565b92508282019050808211156155a9576155a8615246565b5b92915050565b60006040820190506155c460008301856146f8565b6155d160208301846146f8565b9392505050565b6155e181614b61565b82525050565b60006020820190506155fc60008301846155d8565b92915050565b600061560d82614828565b915061561883614828565b925082820190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808112607f8213171561565557615654615246565b5b92915050565b6000615666826146ee565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361569857615697615246565b5b600182019050919050565b6000819050919050565b60006156c86156c36156be846156a3565b61502e565b6148ef565b9050919050565b6156d8816156ad565b82525050565b60006040820190506156f360008301856156cf565b61570060208301846146f8565b9392505050565b600061572261571d615718846152d9565b61502e565b6148ef565b9050919050565b61573281615707565b82525050565b600060408201905061574d6000830185615729565b61575a60208301846146f8565b9392505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006157ce602683615761565b91506157d982615772565b604082019050919050565b600060208201905081810360008301526157fd816157c1565b9050919050565b60006080820190506158196000830186614cd3565b61582660208301856146f8565b6158336040830184615305565b81810360608301526158448161550e565b9050949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000615884602083615761565b915061588f8261584e565b602082019050919050565b600060208201905081810360008301526158b381615877565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006158f0601f83615761565b91506158fb826158ba565b602082019050919050565b6000602082019050818103600083015261591f816158e3565b9050919050565b600061593182614828565b915061593c83614828565b92508282039050607f81137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808212171561597957615978615246565b5b92915050565b60006060820190506159946000830186614cd3565b6159a16020830185614cd3565b6159ae60408301846146f8565b949350505050565b6000819050919050565b6159d16159cc826146ee565b6159b6565b82525050565b60008160601b9050919050565b60006159ef826159d7565b9050919050565b6000615a01826159e4565b9050919050565b615a19615a1482614742565b6159f6565b82525050565b6000615a2b82866159c0565b602082019150615a3b82856159c0565b602082019150615a4b8284615a08565b601482019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615a96826146ee565b9150615aa1836146ee565b925082615ab157615ab0615a5c565b5b82820690509291505056fea2646970667358221220c0af55a77584b4a0527e62bcb7f9de32a43f8e09a4ca3b88746b666eee5d92f764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2064,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "nextBattleId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2066,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "lastMintedChar",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2069,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "waitingBattleId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2121,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "players",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Player)2093_storage)"
      },
      {
        "astId": 2127,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2132,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "battles",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Battle)2108_storage)"
      },
      {
        "astId": 2137,
        "contract": "contracts/CardBattle.sol:CardBattle",
        "label": "tokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Token)2074_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)2_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_enum(Choice)2116)2_storage": {
        "base": "t_enum(Choice)2116",
        "encoding": "inplace",
        "label": "enum CardBattle.Choice[2]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(BattleStatus)2112": {
        "encoding": "inplace",
        "label": "enum CardBattle.BattleStatus",
        "numberOfBytes": "1"
      },
      "t_enum(Choice)2116": {
        "encoding": "inplace",
        "label": "enum CardBattle.Choice",
        "numberOfBytes": "1"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Player)2093_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CardBattle.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)2093_storage"
      },
      "t_mapping(t_uint256,t_struct(Battle)2108_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CardBattle.Battle)",
        "numberOfBytes": "32",
        "value": "t_struct(Battle)2108_storage"
      },
      "t_mapping(t_uint256,t_struct(Token)2074_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CardBattle.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)2074_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Battle)2108_storage": {
        "encoding": "inplace",
        "label": "struct CardBattle.Battle",
        "members": [
          {
            "astId": 2097,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "playerAddrs",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)2_storage"
          },
          {
            "astId": 2099,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "winner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2102,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "battleStatus",
            "offset": 20,
            "slot": "2",
            "type": "t_enum(BattleStatus)2112"
          },
          {
            "astId": 2107,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "moves",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_enum(Choice)2116)2_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Player)2093_storage": {
        "encoding": "inplace",
        "label": "struct CardBattle.Player",
        "members": [
          {
            "astId": 2076,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "playerAddr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2078,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "health",
            "offset": 20,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 2080,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "energy",
            "offset": 21,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 2084,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "battleTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 2086,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "battleAttack",
            "offset": 0,
            "slot": "4",
            "type": "t_int8"
          },
          {
            "astId": 2088,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "battleDefense",
            "offset": 1,
            "slot": "4",
            "type": "t_int8"
          },
          {
            "astId": 2090,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "battleMoveId",
            "offset": 2,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 2092,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "isInBattle",
            "offset": 3,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Token)2074_storage": {
        "encoding": "inplace",
        "label": "struct CardBattle.Token",
        "members": [
          {
            "astId": 2071,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "attack",
            "offset": 0,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 2073,
            "contract": "contracts/CardBattle.sol:CardBattle",
            "label": "defense",
            "offset": 1,
            "slot": "0",
            "type": "t_int8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}